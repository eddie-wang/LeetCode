#Burst Balloons

###problem
Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note: 
(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100

Example:

Given [3, 1, 5, 8]

Return 167

	 nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
	 coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
	 
### solution
一开始的解法是暴力搜索，就是求某个数组的最大maxcoin值，应该是检查没个气球被扎破后，递归的计算剩余气球的maxcoin的值。 递归的过程中有太多的重复计算，超时。

自然而然的想法是把这个改成迭代，但是没法用二维数组表示。

 假设dp[i][j]表示 数组［i，j］的maxcoin值，想用dp解这个题，肯定要要拆出字问题，就是dp[i][j]=F(dp[i][k],dp[k][j]) k 属于i-j。 关键点在于k的意义是什么，怎么从dp[i][j]到dp[i][k],dp[k][j].  比较容易想出的思路是，假设k是第一个要扎波的气球，但是发上发现这样不行，因为这样构造的子问题 dp[i][k] 和 dp[k][j]不是独立的。 所以应该考虑，k为最后一个扎破的气球，这样可以保证，dp[i][k]的最右边和dp[k][j]的最左边不会改变（k）。使得子问题独立。这个是解体关键。 

